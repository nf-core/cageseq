/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args   = '--quiet'
        ext.prefix = { "${meta.id}.raw" }
    }

    withName: FASTQC_POST {
        ext.args   = '--quiet'
        ext.prefix = { "${meta.id}.post" }
        publishDir =
        [
            path: { "${params.outdir}/fastqc_post" },
            mode: 'copy',
            pattern: "*.{html,zip}"
        ]
    }

    withName: 'CUTADAPT_.*' {
        publishDir = [
            [
                path: { "${params.outdir}/cutadapt/logs" },
                mode: 'copy',
                pattern: "*.log"
            ],
            [
                path: { "${params.outdir}/cutadapt/reads" },
                mode: 'copy',
                pattern: "*.{fq.gz,fastq.gz}",
                enabled: params.save_trimmed
            ]
        ]

    }

    withName: CUTADAPT_TRIMADAPTERS{
        ext.prefix = { "${meta.id}.adapter" }
        ext.args   = [
            // if both eco_site and linker_seq are given, use linked adapters format, otherwise cut either eco site from 5'-end or linker from 3', leave empty otherwise.
            (params.trim_ecop && params.trim_linker) ?
            "-a ^${params.eco_site}...${params.linker_seq} --minimum-length 15" :
            params.trim_ecop ? "-g ^${params.eco_site} -e 0 --minimum-length 20" :
            params.trim_linker ? "-a ${params.linker_seq}\$ -e 0 --minimum-length 20":
            "",
            "--match-read-wildcards",
            " --maximum-length 40",
            "--discard-untrimmed",
            "--quality-cutoff 30"
        ].join(' ').trim()
    }
    withName: CUTADAPT_TRIM5G{
        ext.args   = "-g ^G -e 0 --match-read-wildcards "
        ext.prefix = { "${meta.id}.5g" }
    }
    withName: CUTADAPT_TRIMARTIFACTS{
        ext.args   = "-a file:${params.artifacts_3end} -g file:${params.artifacts_5end} -e 0.1 --discard-trimmed --match-read-wildcards -m 15 -O 19"
        ext.prefix = { "${meta.id}.artifacts" }
    }

    withName: GTF2BED {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }
    withName: CUSTOM_GETCHROMSIZES {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }
    withName: 'UNTAR_.*|STAR_GENOMEGENERATE|BOWTIE_BUILD' {
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }
    withName: '.*_ALIGN'{
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/${params.aligner}_log" },
                mode: 'copy',
                pattern: '*.{out,tab}'
            ],
            [
                path: { "${params.outdir}/${params.aligner}/unmapped" },
                mode: 'copy',
                pattern: '*.fastq.gz',
                enabled: params.save_unaligned
            ]
        ]
    }
    withName: STAR_ALIGN {
            ext.args = [
                '--quantMode TranscriptomeSAM',
                '--twopassMode Basic',
                '--outSAMtype BAM Unsorted',
                '--readFilesCommand zcat',
                '--runRNGseed 0',
                '--outFilterScoreMinOverLread 0',
                '--outFilterMatchNminOverLread 0',
                '--seedSearchStartLmax 20',
                '--outFilterMismatchNmax 1',
                '--runDirPerm All_RWX',
                '--outFilterMultimapNmax 1',
                params.save_unaligned ? '--outReadsUnmapped Fastx' : ''
            ].join(' ').trim()
    }
    withName: BOWTIE_ALIGN {
            ext.args = [
                '--sam -m 1',
                '--best',
                '--strata -k 1',
                '--tryhard',
                '--phred33-quals',
                '--chunkmbs 64',
                '--seedmms 2',
                '--seedlen 20 ',
                '--maqerr 70'
            ].join(' ').trim()
    }

    withName: '.*:BAM_SORT_SAMTOOLS:.*' {
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/samtools_stats" },
            mode: 'copy',
            pattern: '*.{stats,flagstat,idxstats}'
        ]
    }
    withName: '.*:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.sorted" }
    }

    withName: SORTMERNA {
        ext.args   = '--num_alignments 1 --fastx -v'
        publishDir = [
            [
                path: { "${params.outdir}/sortmerna" },
                mode: 'copy',
                pattern: "*.log"
            ],
            [
                path: { "${params.outdir}/sortmerna" },
                mode: 'copy',
                pattern: "*.fastq.gz",
                enabled: params.save_non_ribo_reads
            ]
        ]
    }

    withName: '.*GENERATE_CTSS:BEDTOOLS_BAMTOBED' {
        ext.prefix = { "${meta.id}.sorted" }
        publishDir = [
            enabled: false
        ]
    }
    withName: '.*CLUSTER_TAGS:CTSS_PROCESS' {
        publishDir = [
            enabled: false
        ]
    }
    withName: CTSS_CREATE{
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/ctss/bed" },
            mode: 'copy',
            pattern: '*.bed'
        ]
    }

    withName: BGTOBW_POS{
        ext.prefix = { "${meta.id}.pos" }
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/ctss/bigwig" },
            mode: 'copy',
            pattern: '*.bigWig'
        ]
    }

    withName: BGTOBW_NEG{
        ext.prefix = { "${meta.id}.neg" }
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/ctss/bigwig" },
            mode: 'copy',
            pattern: '*.bigWig'
        ]
    }

    withName: '.*CLUSTER_TAGS:CTSS_PROCESS' {
        ext.args   = "-t ${params.tpm_cluster_threshold}"
    }

    withName: '.*CLUSTER_TAGS:PARACLU'{
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/tag_clusters" },
            mode: 'copy',
            pattern: '*.bed'
    ]
    }
    withName: '.*CLUSTER_TAGS:TAG_CLUSTER_GENERATE_COUNTS' {
            ext.prefix = { "${meta.id}.tagcluster" }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/tag_clusters/bed" },
                mode: 'copy',
                pattern: '*.bed'
        ]
    }
    withName: '.*CLUSTER_TAGS:TAG_CLUSTER_GENERATE_COUNT_MATRIX'{
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/tag_clusters" },
            mode: 'copy',
            pattern: '*.tsv'
        ]
    }
    withName: '.*CLUSTER_TAGS:TAG_CLUSTER_QC' {
        publishDir = [
            enabled: false
        ]
    }
    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }

    withName: MULTIQC {
        ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        publishDir = [
            path: { [
                "${params.outdir}/multiqc",
                params.skip_alignment? '' : "/${params.aligner}"
                ].join('') },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
